// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	dto "weatherService/pkg/dto"

	mock "github.com/stretchr/testify/mock"

	model "weatherService/pkg/model"

	time "time"
)

// WeatherService is an autogenerated mock type for the WeatherService type
type WeatherService struct {
	mock.Mock
}

// GetForecastByCityName provides a mock function with given fields: city
func (_m *WeatherService) GetForecastByCityName(city string) (dto.WeatherDto, error) {
	ret := _m.Called(city)

	if len(ret) == 0 {
		panic("no return value specified for GetForecastByCityName")
	}

	var r0 dto.WeatherDto
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (dto.WeatherDto, error)); ok {
		return rf(city)
	}
	if rf, ok := ret.Get(0).(func(string) dto.WeatherDto); ok {
		r0 = rf(city)
	} else {
		r0 = ret.Get(0).(dto.WeatherDto)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(city)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetForecastByCityNameAndDate provides a mock function with given fields: city, date
func (_m *WeatherService) GetForecastByCityNameAndDate(city string, date time.Time) (model.WeatherForecast, error) {
	ret := _m.Called(city, date)

	if len(ret) == 0 {
		panic("no return value specified for GetForecastByCityNameAndDate")
	}

	var r0 model.WeatherForecast
	var r1 error
	if rf, ok := ret.Get(0).(func(string, time.Time) (model.WeatherForecast, error)); ok {
		return rf(city, date)
	}
	if rf, ok := ret.Get(0).(func(string, time.Time) model.WeatherForecast); ok {
		r0 = rf(city, date)
	} else {
		r0 = ret.Get(0).(model.WeatherForecast)
	}

	if rf, ok := ret.Get(1).(func(string, time.Time) error); ok {
		r1 = rf(city, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveWeatherForeCast provides a mock function with given fields: cities, apikey
func (_m *WeatherService) SaveWeatherForeCast(cities []model.City, apikey string) ([]model.WeatherForecast, error) {
	ret := _m.Called(cities, apikey)

	if len(ret) == 0 {
		panic("no return value specified for SaveWeatherForeCast")
	}

	var r0 []model.WeatherForecast
	var r1 error
	if rf, ok := ret.Get(0).(func([]model.City, string) ([]model.WeatherForecast, error)); ok {
		return rf(cities, apikey)
	}
	if rf, ok := ret.Get(0).(func([]model.City, string) []model.WeatherForecast); ok {
		r0 = rf(cities, apikey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.WeatherForecast)
		}
	}

	if rf, ok := ret.Get(1).(func([]model.City, string) error); ok {
		r1 = rf(cities, apikey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWeatherService creates a new instance of WeatherService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWeatherService(t interface {
	mock.TestingT
	Cleanup(func())
}) *WeatherService {
	mock := &WeatherService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
