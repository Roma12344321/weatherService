// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	model "weatherService/pkg/model"

	mock "github.com/stretchr/testify/mock"
)

// FavouriteService is an autogenerated mock type for the FavouriteService type
type FavouriteService struct {
	mock.Mock
}

// AddCityToFavourite provides a mock function with given fields: name, personId
func (_m *FavouriteService) AddCityToFavourite(name string, personId int) error {
	ret := _m.Called(name, personId)

	if len(ret) == 0 {
		panic("no return value specified for AddCityToFavourite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int) error); ok {
		r0 = rf(name, personId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllFavouriteCity provides a mock function with given fields: personId
func (_m *FavouriteService) GetAllFavouriteCity(personId int) ([]model.City, error) {
	ret := _m.Called(personId)

	if len(ret) == 0 {
		panic("no return value specified for GetAllFavouriteCity")
	}

	var r0 []model.City
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]model.City, error)); ok {
		return rf(personId)
	}
	if rf, ok := ret.Get(0).(func(int) []model.City); ok {
		r0 = rf(personId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.City)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(personId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFavouriteService creates a new instance of FavouriteService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFavouriteService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FavouriteService {
	mock := &FavouriteService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
