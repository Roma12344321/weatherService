// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	model "weatherService/pkg/model"

	mock "github.com/stretchr/testify/mock"
)

// CityRepository is an autogenerated mock type for the CityRepository type
type CityRepository struct {
	mock.Mock
}

// GetAllCity provides a mock function with given fields:
func (_m *CityRepository) GetAllCity() ([]model.City, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllCity")
	}

	var r0 []model.City
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.City, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.City); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.City)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: name
func (_m *CityRepository) GetByName(name string) (model.City, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 model.City
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (model.City, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) model.City); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(model.City)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveCity provides a mock function with given fields: city
func (_m *CityRepository) SaveCity(city *model.City) error {
	ret := _m.Called(city)

	if len(ret) == 0 {
		panic("no return value specified for SaveCity")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.City) error); ok {
		r0 = rf(city)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCityRepository creates a new instance of CityRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCityRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CityRepository {
	mock := &CityRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
