// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	model "weatherService/pkg/model"

	mock "github.com/stretchr/testify/mock"
)

// PersonRepository is an autogenerated mock type for the PersonRepository type
type PersonRepository struct {
	mock.Mock
}

// CreatePerson provides a mock function with given fields: person
func (_m *PersonRepository) CreatePerson(person model.Person) (int, error) {
	ret := _m.Called(person)

	if len(ret) == 0 {
		panic("no return value specified for CreatePerson")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Person) (int, error)); ok {
		return rf(person)
	}
	if rf, ok := ret.Get(0).(func(model.Person) int); ok {
		r0 = rf(person)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(model.Person) error); ok {
		r1 = rf(person)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPersonByUsernameAndPassword provides a mock function with given fields: username, password
func (_m *PersonRepository) GetPersonByUsernameAndPassword(username string, password string) (model.Person, error) {
	ret := _m.Called(username, password)

	if len(ret) == 0 {
		panic("no return value specified for GetPersonByUsernameAndPassword")
	}

	var r0 model.Person
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (model.Person, error)); ok {
		return rf(username, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) model.Person); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Get(0).(model.Person)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPersonRepository creates a new instance of PersonRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPersonRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PersonRepository {
	mock := &PersonRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
